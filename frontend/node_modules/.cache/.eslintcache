[{"/home/aluno/Dev212/ws-devsuperior/estudo-project-sds3/frontend/src/index.tsx":"1","/home/aluno/Dev212/ws-devsuperior/estudo-project-sds3/frontend/src/App.tsx":"2","/home/aluno/Dev212/ws-devsuperior/estudo-project-sds3/frontend/src/Routes.tsx":"3","/home/aluno/Dev212/ws-devsuperior/estudo-project-sds3/frontend/src/pages/Home/index.tsx":"4","/home/aluno/Dev212/ws-devsuperior/estudo-project-sds3/frontend/src/pages/Dashboard/index.tsx":"5","/home/aluno/Dev212/ws-devsuperior/estudo-project-sds3/frontend/src/components/BarChart/index.tsx":"6","/home/aluno/Dev212/ws-devsuperior/estudo-project-sds3/frontend/src/components/DataTable/index.tsx":"7","/home/aluno/Dev212/ws-devsuperior/estudo-project-sds3/frontend/src/components/DonutChart/index.tsx":"8","/home/aluno/Dev212/ws-devsuperior/estudo-project-sds3/frontend/src/components/Footer/index.tsx":"9","/home/aluno/Dev212/ws-devsuperior/estudo-project-sds3/frontend/src/components/NavBar/index.tsx":"10","/home/aluno/Dev212/ws-devsuperior/estudo-project-sds3/frontend/src/utils/requests.ts":"11","/home/aluno/Dev212/ws-devsuperior/estudo-project-sds3/frontend/src/utils/format.ts":"12"},{"size":275,"mtime":1620510670125,"results":"13","hashOfConfig":"14"},{"size":106,"mtime":1620577545407,"results":"15","hashOfConfig":"14"},{"size":499,"mtime":1620577468466,"results":"16","hashOfConfig":"14"},{"size":874,"mtime":1620581133876,"results":"17","hashOfConfig":"14"},{"size":1149,"mtime":1620576508776,"results":"18","hashOfConfig":"14"},{"size":1773,"mtime":1620596643186,"results":"19","hashOfConfig":"14"},{"size":1654,"mtime":1620601111074,"results":"20","hashOfConfig":"14"},{"size":1140,"mtime":1620596686116,"results":"21","hashOfConfig":"14"},{"size":627,"mtime":1620510670125,"results":"22","hashOfConfig":"14"},{"size":589,"mtime":1620580762872,"results":"23","hashOfConfig":"14"},{"size":49,"mtime":1620581767643,"results":"24","hashOfConfig":"14"},{"size":431,"mtime":1620598377704,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"mcjx2h",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/aluno/Dev212/ws-devsuperior/estudo-project-sds3/frontend/src/index.tsx",[],["53","54"],"/home/aluno/Dev212/ws-devsuperior/estudo-project-sds3/frontend/src/App.tsx",[],"/home/aluno/Dev212/ws-devsuperior/estudo-project-sds3/frontend/src/Routes.tsx",[],"/home/aluno/Dev212/ws-devsuperior/estudo-project-sds3/frontend/src/pages/Home/index.tsx",[],"/home/aluno/Dev212/ws-devsuperior/estudo-project-sds3/frontend/src/pages/Dashboard/index.tsx",[],"/home/aluno/Dev212/ws-devsuperior/estudo-project-sds3/frontend/src/components/BarChart/index.tsx",["55"],"import axios from \"axios\";\nimport { type } from \"node:os\";\nimport { useEffect } from \"react\";\nimport { useState } from \"react\";\nimport Chart from \"react-apexcharts\";\nimport { saleSuccess } from \"types/sale\";\nimport { round } from \"utils/format\";\nimport { BASE_URL } from \"utils/requests\";\n\ntype SeriesData = {\n    name: string;\n    data: number[];\n}\n\n\ntype ChartData = {\n    labels: {\n        categories: string[];\n    };\n    series: SeriesData[];\n}\n\n\nconst BarChart = () => {\n\n    const [chartData, setChartData] = useState<ChartData>({\n        labels: {\n            categories: []\n        },\n        series: [\n            {\n                name: \"\",\n                data: []\n            }\n        ]\n    });\n\n    useEffect(() => {\n        axios.get(`${BASE_URL}/sales/success-by-seller`)\n            .then(response => {\n                const data = response.data as saleSuccess [];\n                const myLabels = data.map(x => x.sellerName);\n                const mySeries = data.map(x => round(100.0 * x.deals / x.visited, 1));\n\n                setChartData({\n                    labels: {\n                        categories: myLabels\n                    },\n                    series: [\n                        {\n                            name:\"% Success\",\n                            data: mySeries\n                        }\n                    ]\n                });\n                \n            });\n    }, []);\n\n\n    const options = {\n        plotOptions: {\n            bar:{\n                horizontal: true,\n            }\n        }\n    }\n\n\n\n    return (\n        <Chart\n            options={{...options, xaxis: chartData.labels}}\n            series={chartData.series }\n            type=\"bar\"\n            height=\"240\"\n        />\n\n    );\n}\n\nexport default BarChart;","/home/aluno/Dev212/ws-devsuperior/estudo-project-sds3/frontend/src/components/DataTable/index.tsx",[],"/home/aluno/Dev212/ws-devsuperior/estudo-project-sds3/frontend/src/components/DonutChart/index.tsx",["56"],"import axios from \"axios\";\nimport { type } from \"node:os\";\nimport { useEffect } from \"react\";\nimport { useState } from \"react\";\nimport Chart from \"react-apexcharts\";\nimport { SaleSum } from \"types/sale\";\nimport { BASE_URL } from \"utils/requests\";\n\ntype ChartData = {\n    labels: string[];\n    series: number[];\n}\n\n\nconst DonutChart = () => {\n\n    const [chartData, setChartData] = useState<ChartData>({ labels: [], series: [] });\n\n    useEffect(() => {\n        axios.get(`${BASE_URL}/sales/amount-by-seller`)\n            .then(response => {\n                const data = response.data as SaleSum[];\n                const myLabels = data.map(x => x.sellerName);\n                const mySeries = data.map(x => x.sum);\n\n                setChartData({ labels: myLabels, series: mySeries });\n                \n            });\n    }, []);\n  \n\n    const options = {\n        legend: {\n            show: true\n        }\n    }\n\n    return (\n        <Chart\n            options={{ ...options, labels: chartData.labels }}\n            series={chartData.series}\n            type=\"donut\"\n            height=\"240\"\n        />\n    )\n}\n\nexport default DonutChart;","/home/aluno/Dev212/ws-devsuperior/estudo-project-sds3/frontend/src/components/Footer/index.tsx",[],"/home/aluno/Dev212/ws-devsuperior/estudo-project-sds3/frontend/src/components/NavBar/index.tsx",[],"/home/aluno/Dev212/ws-devsuperior/estudo-project-sds3/frontend/src/utils/requests.ts",[],"/home/aluno/Dev212/ws-devsuperior/estudo-project-sds3/frontend/src/utils/format.ts",[],{"ruleId":"57","replacedBy":"58"},{"ruleId":"59","replacedBy":"60"},{"ruleId":"61","severity":1,"message":"62","line":2,"column":10,"nodeType":"63","messageId":"64","endLine":2,"endColumn":14},{"ruleId":"61","severity":1,"message":"62","line":2,"column":10,"nodeType":"63","messageId":"64","endLine":2,"endColumn":14},"no-native-reassign",["65"],"no-negated-in-lhs",["66"],"@typescript-eslint/no-unused-vars","'type' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]